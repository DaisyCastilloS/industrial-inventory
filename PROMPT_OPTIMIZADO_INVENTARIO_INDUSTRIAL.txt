# üè≠ PROMPT OPTIMIZADO PARA SISTEMA DE INVENTARIO INDUSTRIAL

## üéØ CONTEXTO ESPEC√çFICO DEL PROYECTO

### **Tipo de Aplicaci√≥n:**
Sistema de **Inventario Industrial** para gesti√≥n de instrumentos, equipos y materiales industriales/mineros.

### **Dominios Principales:**
- **Usuarios**: Autenticaci√≥n y autorizaci√≥n (ADMIN, USER, VIEWER)
- **Productos**: Gesti√≥n de inventario con SKU, precios, stock cr√≠tico
- **Categor√≠as**: Clasificaci√≥n jer√°rquica de productos
- **Ubicaciones**: Gesti√≥n de almacenes y ubicaciones f√≠sicas
- **Proveedores**: Gesti√≥n de proveedores y contactos
- **Movimientos**: Trazabilidad de entradas/salidas de inventario
- **Auditor√≠a**: Logs autom√°ticos de todas las operaciones

### **Reglas de Negocio Cr√≠ticas:**
- ‚úÖ **Stock cr√≠tico**: Alertas autom√°ticas cuando `quantity <= critical_stock`
- ‚úÖ **Trazabilidad completa**: Todos los movimientos deben ser auditables
- ‚úÖ **SKU √∫nico**: Cada producto debe tener un c√≥digo SKU √∫nico
- ‚úÖ **Jerarqu√≠a de categor√≠as**: Categor√≠as pueden tener subcategor√≠as
- ‚úÖ **Movimientos de inventario**: IN (entrada), OUT (salida), ADJUSTMENT (ajuste)
- ‚úÖ **Auditor√≠a autom√°tica**: Triggers PostgreSQL para todas las operaciones CRUD

### **Casos de Uso Prioritarios:**
1. **Gesti√≥n de Productos**: CRUD completo con validaciones de stock
2. **Movimientos de Inventario**: Entradas, salidas y ajustes con trazabilidad
3. **Alertas de Stock Cr√≠tico**: Notificaciones autom√°ticas
4. **Reportes de Auditor√≠a**: Historial completo de cambios
5. **Gesti√≥n de Ubicaciones**: Control de almacenes y estantes
6. **Gesti√≥n de Proveedores**: Informaci√≥n de contacto y productos asociados

## üèóÔ∏è ARQUITECTURA Y ESTRUCTURA

### **Tecnolog√≠as del Stack:**
- **TypeScript** (ES2020, strict mode)
- **Node.js** con Express.js
- **PostgreSQL** con pg driver
- **Clean Architecture** (4 capas bien definidas)
- **Jest** para testing con ts-jest
- **Winston** para logging estructurado
- **Zod** para validaci√≥n de datos en runtime
- **bcrypt** para encriptaci√≥n de contrase√±as
- **jsonwebtoken** para autenticaci√≥n JWT
- **Swagger/OpenAPI** para documentaci√≥n
- **pnpm** como package manager
- **Husky** + **commitlint** para Conventional Commits
- **ESLint** + **Prettier** para calidad de c√≥digo
- **Docker** para containerizaci√≥n

### **Estructura de Carpetas:**
```
src/
‚îú‚îÄ‚îÄ 00-constants/          # Constantes globales
‚îú‚îÄ‚îÄ 01-domain/            # Entidades y reglas de negocio
‚îú‚îÄ‚îÄ 02-application/       # Casos de uso y DTOs
‚îú‚îÄ‚îÄ 03-infrastructure/    # Implementaciones concretas
‚îú‚îÄ‚îÄ 04-presentation/      # Controllers y Express server
‚îî‚îÄ‚îÄ __tests__/           # Tests unitarios e integraci√≥n
```

### **Base de Datos (PostgreSQL):**
```sql
-- Entidades principales ya definidas en init.sql:
- users (id, email, password, name, role, is_active, timestamps)
- categories (id, name, description, parent_id, is_active, timestamps)
- locations (id, name, description, zone, shelf, is_active, timestamps)
- suppliers (id, name, contact_person, email, phone, address, is_active, timestamps)
- products (id, name, description, sku, price, quantity, critical_stock, category_id, location_id, supplier_id, is_active, timestamps)
- product_movements (id, product_id, movement_type, quantity, previous_quantity, new_quantity, reason, user_id, created_at)
- audit_logs (id, table_name, record_id, action, old_values, new_values, user_id, ip_address, user_agent, created_at)
```

### **Vistas √ötiles Implementadas:**
- `products_full_info`: Productos con informaci√≥n completa
- `critical_stock_products`: Productos en stock cr√≠tico
- `recent_movements`: Movimientos recientes con detalles

## üé® GENERACI√ìN DE DIAGRAMA ERD

### **1. Diagrama PlantUML Mejorado**
```plantuml
@startuml
!define RECTANGLE class

skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF
skinparam roundcorner 5
skinparam shadowing false

skinparam class {
    BackgroundColor #F8F9FA
    BorderColor #6C757D
    FontColor #212529
}

' Entidades principales
RECTANGLE "users" as Users #E3F2FD {
    +id: serial [PK]
    +email: varchar(100) [UK]
    +password: varchar(255)
    +name: varchar(100)
    +role: varchar(20)
    +is_active: boolean
    +created_at: timestamp
    +updated_at: timestamp
    --
    [INDEX] idx_users_email
    [INDEX] idx_users_role
}

RECTANGLE "categories" as Categories #E8F5E8 {
    +id: serial [PK]
    +name: varchar(100) [UK]
    +description: text
    +parent_id: int [FK]
    +is_active: boolean
    +created_at: timestamp
    +updated_at: timestamp
    --
    [INDEX] idx_categories_parent_id
    [INDEX] idx_categories_is_active
}

RECTANGLE "locations" as Locations #FFF3E0 {
    +id: serial [PK]
    +name: varchar(100)
    +description: text
    +zone: varchar(50)
    +shelf: varchar(50)
    +is_active: boolean
    +created_at: timestamp
    +updated_at: timestamp
}

RECTANGLE "suppliers" as Suppliers #F3E5F5 {
    +id: serial [PK]
    +name: varchar(200)
    +contact_person: varchar(100)
    +email: varchar(100)
    +phone: varchar(20)
    +address: text
    +is_active: boolean
    +created_at: timestamp
    +updated_at: timestamp
}

RECTANGLE "products" as Products #FFEBEE {
    +id: serial [PK]
    +name: varchar(255)
    +description: text
    +sku: varchar(50) [UK]
    +price: numeric(10,2)
    +quantity: int
    +critical_stock: int
    +category_id: int [FK]
    +location_id: int [FK]
    +supplier_id: int [FK]
    +is_active: boolean
    +created_at: timestamp
    +updated_at: timestamp
    --
    [INDEX] idx_products_category_id
    [INDEX] idx_products_location_id
    [INDEX] idx_products_supplier_id
    [INDEX] idx_products_is_active
    [INDEX] idx_products_sku
    [INDEX] idx_products_name
}

RECTANGLE "product_movements" as Movements #FFF8E1 {
    +id: serial [PK]
    +product_id: int [FK]
    +movement_type: varchar(20)
    +quantity: int
    +previous_quantity: int
    +new_quantity: int
    +reason: varchar(200)
    +user_id: int [FK]
    +created_at: timestamp
    --
    [INDEX] idx_product_movements_product_id
    [INDEX] idx_product_movements_user_id
    [INDEX] idx_product_movements_created_at
}

RECTANGLE "audit_logs" as AuditLogs #F5F5F5 {
    +id: serial [PK]
    +table_name: varchar(50)
    +record_id: int
    +action: varchar(20)
    +old_values: jsonb
    +new_values: jsonb
    +user_id: int [FK]
    +ip_address: inet
    +user_agent: text
    +created_at: timestamp
    --
    [INDEX] idx_audit_logs_table_name
    [INDEX] idx_audit_logs_user_id
    [INDEX] idx_audit_logs_created_at
}

' Vistas del sistema
RECTANGLE "products_full_info" as ProductsView #E1F5FE {
    [VIEW]
    +id, name, description, sku
    +price, quantity, critical_stock
    +category_name, location_name
    +supplier_name, stock_status
    +created_at, updated_at
}

RECTANGLE "critical_stock_products" as CriticalStockView #FFCDD2 {
    [VIEW]
    +id, name, sku, quantity
    +critical_stock, category_name
    +location_name, supplier_name
}

RECTANGLE "recent_movements" as MovementsView #FFF9C4 {
    [VIEW]
    +id, product_name, sku
    +movement_type, quantity
    +previous_quantity, new_quantity
    +reason, user_name, created_at
}

' Relaciones principales
Products ||--o{ Movements : "1:N\n(Un producto tiene muchos movimientos)"
Movements }o--|| Users : "N:1\n(Muchos movimientos los realiza un usuario)"
Products }o--|| Categories : "N:1\n(Muchos productos pertenecen a una categor√≠a)"
Products }o--|| Locations : "N:1\n(Muchos productos est√°n en una ubicaci√≥n)"
Products }o--|| Suppliers : "N:1\n(Muchos productos tienen un proveedor)"
AuditLogs }o--|| Users : "N:1\n(Muchos logs los genera un usuario)"

' Auto-relaci√≥n para jerarqu√≠a de categor√≠as
Categories }o--|| Categories : "N:1\n(Categor√≠as pueden tener subcategor√≠as)"

' Relaciones de auditor√≠a
AuditLogs ..> Products : "Audita cambios"
AuditLogs ..> Categories : "Audita cambios"
AuditLogs ..> Locations : "Audita cambios"
AuditLogs ..> Suppliers : "Audita cambios"

' Vistas relacionadas
ProductsView ..> Products : "Consulta"
CriticalStockView ..> Products : "Filtra stock cr√≠tico"
MovementsView ..> Movements : "Consulta con joins"

' Triggers y funciones
note top of Products : "TRIGGER: audit_products_trigger\nTRIGGER: check_critical_stock_trigger\nTRIGGER: update_products_updated_at"
note top of Categories : "TRIGGER: audit_categories_trigger\nTRIGGER: update_categories_updated_at"
note top of Locations : "TRIGGER: audit_locations_trigger\nTRIGGER: update_locations_updated_at"
note top of Suppliers : "TRIGGER: audit_suppliers_trigger\nTRIGGER: update_suppliers_updated_at"
note top of Users : "TRIGGER: update_users_updated_at"

' Notas del sistema
note as N1
**Sistema de Inventario Industrial**
- PostgreSQL con triggers de auditor√≠a
- Trazabilidad completa de movimientos
- Alertas de stock cr√≠tico
- Roles: ADMIN, USER, VIEWER
- Movimientos: IN, OUT, ADJUSTMENT
end note

note as N2
**Caracter√≠sticas T√©cnicas:**
- √çndices optimizados para consultas
- Vistas para reportes comunes
- Auditor√≠a autom√°tica con JSONB
- Validaciones de integridad
- Timestamps autom√°ticos
end note

@enduml
```

### **2. Generaci√≥n Autom√°tica de PNG**
```bash
# Comando para generar el diagrama PNG
plantuml -tpng docs/database-erd-diagram.puml
# O usando Docker
docker run -v $(pwd):/data plantuml/plantuml -tpng /data/docs/database-erd-diagram.puml
```

### **3. Caracter√≠sticas del Diagrama:**
- ‚úÖ **Entidades principales** con todos los campos
- ‚úÖ **√çndices optimizados** para consultas
- ‚úÖ **Triggers de auditor√≠a** documentados
- ‚úÖ **Vistas del sistema** para reportes
- ‚úÖ **Relaciones** con cardinalidad clara
- ‚úÖ **Notas t√©cnicas** del sistema
- ‚úÖ **Colores diferenciados** por tipo de entidad

## üèóÔ∏è PRINCIPIOS Y EST√ÅNDARES

### **1. Clean Architecture**
- ‚úÖ **Dependencias unidireccionales**: Solo hacia adentro
- ‚úÖ **Inversi√≥n de dependencias**: Interfaces en capas internas
- ‚úÖ **Separaci√≥n clara de responsabilidades**: Cada capa tiene un prop√≥sito espec√≠fico
- ‚úÖ **Independencia de frameworks**: La l√≥gica de negocio no depende de Express
- ‚úÖ **Trazabilidad**: Todas las operaciones deben ser auditables

### **2. TypeScript Best Practices**
- ‚úÖ **Strict mode** habilitado
- ‚úÖ **Interfaces expl√≠citas** para todos los contratos
- ‚úÖ **Tipos gen√©ricos** cuando sea apropiado
- ‚úÖ **Enums** para valores constantes
- ‚úÖ **Type guards** para validaci√≥n de tipos
- ‚úÖ **Utility types** de TypeScript

### **3. Quality Assurance**
- ‚úÖ **ESLint** con reglas estrictas
- ‚úÖ **Prettier** para formateo consistente
- ‚úÖ **Husky** para pre-commit hooks
- ‚úÖ **commitlint** para Conventional Commits
- ‚úÖ **Jest** con coverage m√≠nimo 90%
- ‚úÖ **TypeScript** strict mode
- ‚úÖ **Validaci√≥n de seguridad** para operaciones cr√≠ticas

## üîß PATRONES DE DISE√ëO

### **1. Repository Pattern con Auditor√≠a**
```typescript
interface ProductRepository {
  create(product: Product): Promise<Product>;
  findById(id: number): Promise<Product | null>;
  findBySku(sku: string): Promise<Product | null>;
  findAll(): Promise<Product[]>;
  update(id: number, product: Partial<Product>): Promise<Product>;
  delete(id: number): Promise<void>;
  
  // M√©todos espec√≠ficos del dominio
  findByCategory(categoryId: number): Promise<Product[]>;
  findByLocation(locationId: number): Promise<Product[]>;
  findCriticalStock(): Promise<Product[]>;
  findLowStock(): Promise<Product[]>;
  
  // Movimientos de inventario
  addMovement(movement: ProductMovement): Promise<ProductMovement>;
  getMovements(productId: number): Promise<ProductMovement[]>;
  
  // Auditor√≠a
  getAuditTrail(productId: number): Promise<AuditLog[]>;
}
```

### **2. Use Case Pattern con Validaciones**
```typescript
class CreateProductUseCase {
  constructor(
    private productRepository: ProductRepository,
    private logger: LoggerWrapperInterface,
    private validator: ProductValidator
  ) {}
  
  async execute(data: CreateProductDTO): Promise<Product> {
    // Validaciones espec√≠ficas del dominio
    await this.validator.validateProduct(data);
    await this.validator.validateSkuUniqueness(data.sku);
    
    // L√≥gica de negocio
    const product = new Product(data);
    
    // Auditor√≠a autom√°tica
    await this.logger.info('Product created', {
      productId: product.getId(),
      sku: product.getSku(),
      createdBy: data.createdBy,
      metadata: { category: data.categoryId, location: data.locationId }
    });
    
    return product;
  }
}
```

### **3. Movement Use Case con Trazabilidad**
```typescript
class AddProductMovementUseCase {
  constructor(
    private productRepository: ProductRepository,
    private movementRepository: ProductMovementRepository,
    private logger: LoggerWrapperInterface
  ) {}
  
  async execute(data: AddMovementDTO): Promise<ProductMovement> {
    const product = await this.productRepository.findById(data.productId);
    if (!product) throw new NotFoundError('Product', data.productId);
    
    const previousQuantity = product.getQuantity();
    const newQuantity = this.calculateNewQuantity(previousQuantity, data);
    
    // Validar stock suficiente para salidas
    if (data.movementType === 'OUT' && newQuantity < 0) {
      throw new InsufficientStockError(product.getSku(), previousQuantity, data.quantity);
    }
    
    // Crear movimiento
    const movement = new ProductMovement({
      productId: data.productId,
      movementType: data.movementType,
      quantity: data.quantity,
      previousQuantity,
      newQuantity,
      reason: data.reason,
      userId: data.userId
    });
    
    // Actualizar stock del producto
    await this.productRepository.update(data.productId, { quantity: newQuantity });
    
    // Guardar movimiento
    const savedMovement = await this.movementRepository.create(movement);
    
    // Auditor√≠a
    await this.logger.info('Product movement added', {
      productId: data.productId,
      movementType: data.movementType,
      quantity: data.quantity,
      newQuantity,
      userId: data.userId
    });
    
    return savedMovement;
  }
}
```

### **4. Dependency Injection**
- ‚úÖ **Constructor injection** para dependencias
- ‚úÖ **Interface segregation** para contratos espec√≠ficos
- ‚úÖ **Factory pattern** para creaci√≥n de instancias
- ‚úÖ **Validators** para operaciones cr√≠ticas

## üõ°Ô∏è MANEJO DE ERRORES Y VALIDACIONES

### **1. Error Hierarchy**
```typescript
class DomainError extends Error {
  constructor(message: string, public code: string, public severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL') {
    super(message);
    this.name = 'DomainError';
  }
}

class ValidationError extends DomainError {
  constructor(field: string, message: string) {
    super(`Validation error in ${field}: ${message}`, 'VALIDATION_ERROR', 'HIGH');
  }
}

class NotFoundError extends DomainError {
  constructor(entityType: string, id: number) {
    super(`${entityType} with ID ${id} not found`, 'NOT_FOUND', 'MEDIUM');
  }
}

class InsufficientStockError extends DomainError {
  constructor(sku: string, currentStock: number, requestedQuantity: number) {
    super(`Insufficient stock for SKU ${sku}. Current: ${currentStock}, Requested: ${requestedQuantity}`, 'INSUFFICIENT_STOCK', 'HIGH');
  }
}
```

### **2. Zod Validation para Datos**
```typescript
const ProductSchema = z.object({
  name: z.string().min(1, 'Name is required').max(255),
  description: z.string().optional(),
  sku: z.string().min(1, 'SKU is required').max(50).regex(/^[A-Z0-9-]+$/, 'SKU must contain only uppercase letters, numbers and hyphens'),
  price: z.number().positive('Price must be positive'),
  quantity: z.number().int().min(0, 'Quantity cannot be negative'),
  critical_stock: z.number().int().min(0, 'Critical stock cannot be negative'),
  category_id: z.number().int().positive('Category is required'),
  location_id: z.number().int().positive().optional(),
  supplier_id: z.number().int().positive().optional(),
  is_active: z.boolean().default(true)
});

const MovementSchema = z.object({
  product_id: z.number().int().positive('Product ID is required'),
  movement_type: z.enum(['IN', 'OUT', 'ADJUSTMENT'], 'Invalid movement type'),
  quantity: z.number().int().positive('Quantity must be positive'),
  reason: z.string().min(1, 'Reason is required').max(200),
  user_id: z.number().int().positive('User ID is required')
});
```

### **3. Winston Logging con Auditor√≠a**
```typescript
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { 
    service: 'inventory-api',
    environment: process.env.NODE_ENV,
    version: process.env.APP_VERSION
  },
  transports: [
    new winston.transports.File({ 
      filename: 'logs/error.log', 
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    new winston.transports.File({ 
      filename: 'logs/audit.log',
      level: 'info',
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
      )
    }),
    new winston.transports.File({ 
      filename: 'logs/combined.log' 
    })
  ]
});
```

## üß™ TESTING STRATEGY

### **1. Unit Tests con Coverage 90%**
```typescript
describe('Product Domain', () => {
  it('should create product with valid SKU', () => {
    const product = new Product({
      name: 'Sensor Industrial',
      sku: 'SENS-001',
      price: 1000,
      quantity: 10,
      critical_stock: 5
    });
    
    expect(product.getSku()).toBe('SENS-001');
    expect(product.isInCriticalStock()).toBe(false);
  });

  it('should detect critical stock', () => {
    const product = new Product({
      name: 'Sensor Industrial',
      sku: 'SENS-001',
      price: 1000,
      quantity: 3,
      critical_stock: 5
    });
    
    expect(product.isInCriticalStock()).toBe(true);
  });

  it('should throw error for invalid data', () => {
    expect(() => new Product({
      name: '', // Invalid: empty name
      sku: 'SENS-001',
      price: 1000,
      quantity: 10,
      critical_stock: 5
    })).toThrow('Name is required');
  });
});
```

### **2. Integration Tests**
```typescript
describe('Product Movement Integration', () => {
  it('should handle inventory movement with audit trail', async () => {
    const product = await createTestProduct();
    const user = await createTestUser();
    
    const movement = await addProductMovementUseCase.execute({
      productId: product.getId(),
      movementType: 'IN',
      quantity: 10,
      reason: 'Initial stock',
      userId: user.getId()
    });
    
    const updatedProduct = await productRepository.findById(product.getId());
    const auditTrail = await productRepository.getAuditTrail(product.getId());
    
    expect(updatedProduct.getQuantity()).toBe(10);
    expect(auditTrail).toHaveLength(2); // Product creation + movement
  });
});
```

## üìù CONVENTIONAL COMMITS CON HUSKY

### **1. Configuraci√≥n de Husky**
```json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged && npm run test:coverage",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-push": "npm run test:integration"
    }
  },
  "lint-staged": {
    "*.{ts,js}": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ],
    "*.{json,md}": [
      "prettier --write",
      "git add"
    ]
  }
}
```

### **2. Commitlint Configuration**
```javascript
// commitlint.config.js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat',
        'fix',
        'docs',
        'style',
        'refactor',
        'perf',
        'test',
        'chore',
        'revert',
        'ci',
        'build',
        'security',
        'audit'
      ]
    ],
    'scope-enum': [
      2,
      'always',
      [
        'auth',
        'users',
        'products',
        'categories',
        'locations',
        'suppliers',
        'movements',
        'audit',
        'validation',
        'security',
        'api',
        'database'
      ]
    ]
  }
};
```

### **3. Conventional Commits Format**
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

**Ejemplos:**
- `feat(products): add product creation endpoint`
- `fix(validation): resolve SKU validation issue`
- `security(audit): implement enhanced audit trail`
- `test(movements): add comprehensive movement tests`
- `audit(products): implement product lifecycle tracking`

## üìä M√âTRICAS Y MONITOREO

### **1. KPIs del Sistema**
- Stock cr√≠tico por categor√≠a
- Movimientos por per√≠odo
- Productos m√°s movidos
- Alertas de stock generadas
- Usuarios m√°s activos

### **2. Alertas Autom√°ticas**
```typescript
class StockAlertService {
  async checkCriticalStock(): Promise<Alert[]> {
    const criticalProducts = await this.productRepository.findCriticalStock();
    
    return criticalProducts.map(product => ({
      type: 'CRITICAL_STOCK',
      severity: 'HIGH',
      message: `Product ${product.getSku()} is in critical stock`,
      productId: product.getId(),
      currentQuantity: product.getQuantity(),
      criticalStock: product.getCriticalStock()
    }));
  }
}
```

## üöÄ ENTRYGABLES ESPEC√çFICOS

### **1. Endpoints REST API**
```
POST   /api/auth/login
POST   /api/auth/register
GET    /api/auth/profile

GET    /api/products
POST   /api/products
GET    /api/products/:id
PUT    /api/products/:id
DELETE /api/products/:id
GET    /api/products/:id/movements
POST   /api/products/:id/movements

GET    /api/categories
POST   /api/categories
GET    /api/categories/:id
PUT    /api/categories/:id
DELETE /api/categories/:id

GET    /api/locations
POST   /api/locations
GET    /api/locations/:id
PUT    /api/locations/:id
DELETE /api/locations/:id

GET    /api/suppliers
POST   /api/suppliers
GET    /api/suppliers/:id
PUT    /api/suppliers/:id
DELETE /api/suppliers/:id

GET    /api/audit-logs
GET    /api/audit-logs/:table/:id

GET    /api/reports/critical-stock
GET    /api/reports/movements
GET    /api/reports/inventory-value
```

### **2. Documentaci√≥n Swagger**
- Esquemas completos para todas las entidades
- Ejemplos de requests/responses
- C√≥digos de error espec√≠ficos
- Autenticaci√≥n JWT documentada

## üîÑ FORMATO DE RESPUESTA

### **AN√ÅLISIS:**
- üîç Identificar problemas de arquitectura
- üö® Detectar violaciones de Clean Architecture
- üí° Sugerir mejoras de estructura
- üìä Evaluar calidad del c√≥digo actual
- üõ°Ô∏è Revisar implementaci√≥n de seguridad y auditor√≠a

### **REFACTORIZACI√ìN:**
- üèóÔ∏è C√≥digo refactorizado por capas siguiendo Clean Architecture
- üìù Explicaci√≥n de cada cambio con justificaci√≥n
- üéØ Justificaci√≥n de decisiones arquitect√≥nicas
- üîß Implementaci√≥n de patrones de dise√±o
- üõ°Ô∏è Implementaci√≥n de validaciones de seguridad

### **MEJORAS ADICIONALES:**
- ‚ö° Optimizaciones de performance
- üîí Mejoras de seguridad
- üìö Documentaci√≥n JSDoc completa
- üß™ Tests unitarios e integraci√≥n con coverage 90%
- üé® Configuraci√≥n de herramientas de calidad
- üìä Implementaci√≥n de auditor√≠a y trazabilidad
- üö® Sistema de alertas para operaciones cr√≠ticas
- üìà Generaci√≥n de diagrama ERD en PNG

## üöÄ INSTRUCCIONES ESPEC√çFICAS

### **1. Arquitectura y Estructura:**
- ‚úÖ Mant√©n la estructura de carpetas existente
- ‚úÖ Usa interfaces para inversi√≥n de dependencias
- ‚úÖ Implementa proper error handling con errores espec√≠ficos del dominio
- ‚úÖ A√±ade validaciones robustas con Zod
- ‚úÖ Implementa auditor√≠a autom√°tica para todas las operaciones

### **2. Testing y Calidad:**
- ‚úÖ Considera testing en cada capa con coverage 90%
- ‚úÖ Documenta con JSDoc completo
- ‚úÖ Optimiza para performance y mantenibilidad
- ‚úÖ Implementa tests de seguridad
- ‚úÖ A√±ade tests de auditor√≠a y trazabilidad

### **3. Herramientas de Desarrollo:**
- ‚úÖ Configura Husky para pre-commit hooks
- ‚úÖ Implementa commitlint para Conventional Commits
- ‚úÖ Configura ESLint y Prettier con reglas estrictas
- ‚úÖ Establece lint-staged para archivos modificados
- ‚úÖ Implementa validaciones de seguridad en pre-commit

### **4. Logging y Monitoreo:**
- ‚úÖ Usa Winston para logging estructurado con auditor√≠a
- ‚úÖ Implementa diferentes niveles de log (INFO, WARN, ERROR, CRITICAL)
- ‚úÖ A√±ade contexto detallado en logs de error
- ‚úÖ Configura rotaci√≥n de logs con retenci√≥n
- ‚úÖ Implementa alertas para operaciones cr√≠ticas

### **5. Seguridad:**
- ‚úÖ Valida todas las entradas con Zod
- ‚úÖ Implementa sanitizaci√≥n de datos
- ‚úÖ Usa bcrypt para hashing de contrase√±as
- ‚úÖ Implementa rate limiting para endpoints sensibles
- ‚úÖ A√±ade validaciones de seguridad espec√≠ficas
- ‚úÖ Implementa auditor√≠a autom√°tica de todas las operaciones

### **6. Documentaci√≥n Visual:**
- ‚úÖ Genera diagrama ERD en PNG usando PlantUML
- ‚úÖ Incluye √≠ndices y triggers en el diagrama
- ‚úÖ Documenta vistas del sistema
- ‚úÖ Muestra relaciones con cardinalidad clara
- ‚úÖ A√±ade notas t√©cnicas del sistema

## üìã CHECKLIST DE ENTREGA

### **Antes de Proporcionar el C√≥digo:**
- [x] ‚úÖ Sistema de Inventario Industrial
- [x] ‚úÖ PostgreSQL con triggers de auditor√≠a
- [x] ‚úÖ Docker configurado
- [x] ‚úÖ Estructura de base de datos completa
- [x] ‚úÖ Reglas de negocio definidas
- [x] ‚úÖ Diagrama PlantUML mejorado

### **Despu√©s de la Refactorizaci√≥n:**
- [ ] ‚úÖ Clean Architecture implementada
- [ ] ‚úÖ Validaciones de dominio con Zod
- [ ] ‚úÖ Tests unitarios e integraci√≥n (90% coverage)
- [ ] ‚úÖ Logging estructurado con auditor√≠a
- [ ] ‚úÖ Husky y commitlint configurados
- [ ] ‚úÖ ESLint y Prettier configurados
- [ ] ‚úÖ Documentaci√≥n JSDoc completa
- [ ] ‚úÖ Manejo de errores espec√≠ficos del dominio
- [ ] ‚úÖ Type safety completo
- [ ] ‚úÖ Performance optimizado
- [ ] ‚úÖ Auditor√≠a autom√°tica implementada
- [ ] ‚úÖ Alertas de stock cr√≠tico
- [ ] ‚úÖ Trazabilidad completa de movimientos
- [ ] ‚úÖ Reportes y m√©tricas
- [ ] ‚úÖ API REST documentada con Swagger
- [ ] ‚úÖ Diagrama ERD en PNG generado

---

**üéØ OBJETIVO FINAL:** Crear un sistema robusto de inventario industrial que siga Clean Architecture, con trazabilidad completa, auditor√≠a autom√°tica y alertas de stock cr√≠tico, optimizado para el manejo de instrumentos y equipos industriales, incluyendo documentaci√≥n visual completa.

**üìù INSTRUCCI√ìN:** Proporciona el c√≥digo que quieres refactorizar y proceder√© con el an√°lisis y refactorizaci√≥n completa siguiendo todos estos est√°ndares y patrones espec√≠ficos para el sistema de inventario industrial, incluyendo la generaci√≥n del diagrama ERD en PNG.

---

**üìÑ ARCHIVO GENERADO:** PROMPT_OPTIMIZADO_INVENTARIO_INDUSTRIAL.txt
**üìÖ FECHA:** $(date)
**üè∑Ô∏è VERSI√ìN:** 1.0.0
**üìù AUTOR:** Senior Software Engineer - Clean Architecture Specialist 