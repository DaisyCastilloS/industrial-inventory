openapi: 3.0.3
info:
  title: üè≠ Industrial Inventory API
  version: 1.0.0
  description: |
    ## Sistema de Inventario Industrial Minero
    
    API robusta y escalable para la gesti√≥n de inventario de instrumentos industriales mineros construida con Clean Architecture, TypeScript y PostgreSQL.
    
    ### Caracter√≠sticas Principales
    - ‚úÖ Gesti√≥n completa de instrumentos industriales (CRUD)
    - üîê Autenticaci√≥n JWT con roles y permisos
    - üìä Logging estructurado con Winston
    - üß™ Validaci√≥n robusta con Zod
    - üìö Documentaci√≥n interactiva completa
    - üèóÔ∏è Arquitectura limpia y escalable
    - üöÄ Cach√© optimizado por endpoint
    
    ### Tecnolog√≠as
    - **Backend**: Node.js, TypeScript, Express
    - **Base de Datos**: PostgreSQL
    - **Autenticaci√≥n**: JWT (JSON Web Tokens)
    - **Validaci√≥n**: Zod
    - **Logging**: Winston
    - **Documentaci√≥n**: Swagger/OpenAPI
    - **Cach√©**: In-memory con TTL configurable
    
    ### Arquitectura
    Este proyecto sigue los principios de Clean Architecture con 4 capas bien definidas:
    - **Domain Layer**: Entidades y reglas de negocio
    - **Application Layer**: Casos de uso y DTOs
    - **Infrastructure Layer**: Implementaciones t√©cnicas
    - **Presentation Layer**: Controladores y HTTP
    
    ### Sistema de Roles
    El sistema implementa 6 niveles de acceso con permisos espec√≠ficos:
    
    1. **ADMIN** üëë
       - Acceso total al sistema (CRUD en todos los recursos)
       - Gesti√≥n de usuarios y roles
       - Acceso completo a logs de auditor√≠a
       - Operaciones cr√≠ticas (eliminaci√≥n)
       - Creaci√≥n y modificaci√≥n de todos los recursos
    
    2. **MANAGER** üè¢
       - CRUD en productos, categor√≠as, ubicaciones, proveedores
       - CRUD en movimientos de productos
       - Acceso de lectura a logs de auditor√≠a
       - Sin acceso a gesti√≥n de usuarios
       - Sin acceso a eliminaci√≥n de productos con stock
    
    3. **SUPERVISOR** üë®‚Äçüíº
       - Read en todos los recursos
       - Update en productos, categor√≠as, ubicaciones, proveedores
       - Create y Read en movimientos de productos
       - Acceso de lectura a logs de auditor√≠a
       - Sin acceso a gesti√≥n de usuarios
       - Sin acceso a eliminaci√≥n de recursos
    
    4. **USER** üë§
       - Read en todos los recursos
       - Create, Read, Update en productos
       - Create y Read en movimientos de productos
       - Acceso de lectura a logs de auditor√≠a
       - Sin acceso a gesti√≥n de usuarios
       - Sin acceso a eliminaci√≥n de recursos
    
    5. **AUDITOR** üìä
       - Solo operaciones de lectura en todos los recursos
       - Acceso completo a logs de auditor√≠a
       - Generaci√≥n de reportes
       - Sin acceso a modificaci√≥n de recursos
       - Sin acceso a gesti√≥n de usuarios
    
    6. **VIEWER** üëÄ
       - Solo operaciones de lectura en productos, categor√≠as, ubicaciones, proveedores
       - Sin acceso a movimientos de productos
       - Sin acceso a logs de auditor√≠a
       - Sin acceso a modificaci√≥n, creaci√≥n o eliminaci√≥n
    
    ### Sistema de Cach√©
    Implementaci√≥n de cach√© por endpoint:
    
    | Endpoint | TTL (segundos) |
    |----------|----------------|
    | Products | 300 (5min) |
    | Categories | 600 (10min) |
    | Locations | 600 (10min) |
    | Suppliers | 600 (10min) |
    | Audit Logs | 60 (1min) |
    
    ---
    
    **Desarrollado por**: Daisy Castillo Sepulveda
    **Repositorio**: [GitHub](https://github.com/DaisyCastilloS/industrial-inventory)
  contact:
    name: Daisy Castillo Sepulveda
    url: https://github.com/DaisyCastilloS
    email: daisy.castillo@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/DaisyCastilloS/industrial-inventory/blob/main/README.md

servers:
  - url: http://localhost:3000
    description: Servidor de desarrollo local
  - url: https://api.industrial-inventory.com
    description: Servidor de producci√≥n (ejemplo)

tags:
  - name: Authentication
    description: |
      üîê **Gesti√≥n de Autenticaci√≥n y Autorizaci√≥n**
      
      Endpoints para el manejo de usuarios, sesiones y tokens de acceso.
      
      ### Funcionalidades
      - Registro de usuarios
      - Inicio de sesi√≥n
      - Refresh de tokens
      - Cierre de sesi√≥n
      - Gesti√≥n de roles y permisos
      
      ### Seguridad
      - Tokens JWT con expiraci√≥n
      - Refresh tokens autom√°ticos
      - Encriptaci√≥n de contrase√±as
      - Validaci√≥n de roles

  - name: Products
    description: |
      üì¶ **Gesti√≥n de Productos e Inventario**
      
      Endpoints para el manejo completo del cat√°logo de productos.
      
      ### Funcionalidades
      - CRUD completo de productos
      - Gesti√≥n de stock en tiempo real
      - Categorizaci√≥n y clasificaci√≥n
      - Informaci√≥n de proveedores
      - Ubicaciones de almacenamiento
      
      ### Caracter√≠sticas
      - C√≥digos √∫nicos de producto
      - Precios y costos
      - Stock m√≠nimo y m√°ximo
      - Estados activo/inactivo

  - name: Users
    description: |
      üë• **Gesti√≥n de Usuarios del Sistema**
      
      Endpoints para la administraci√≥n de usuarios y sus roles.
      
      ### Funcionalidades
      - CRUD completo de usuarios
      - Gesti√≥n de roles (ADMIN, USER, VIEWER)
      - Estados activo/inactivo
      - Informaci√≥n de contacto
      
      ### Seguridad
      - Encriptaci√≥n de contrase√±as
      - Validaci√≥n de permisos
      - Logs de auditor√≠a

  - name: Categories
    description: |
      üìÇ **Gesti√≥n de Categor√≠as de Productos**
      
      Endpoints para organizar productos en categor√≠as jer√°rquicas.
      
      ### Funcionalidades
      - CRUD completo de categor√≠as
      - Estructura jer√°rquica (parent/child)
      - Descripciones y metadatos
      - Estados activo/inactivo
      
      ### Caracter√≠sticas
      - Categor√≠as anidadas
      - Validaci√≥n de integridad
      - Logs de auditor√≠a

  - name: Suppliers
    description: |
      üè≠ **Gesti√≥n de Proveedores**
      
      Endpoints para el manejo de proveedores y sus informaci√≥n de contacto.
      
      ### Funcionalidades
      - CRUD completo de proveedores
      - Informaci√≥n de contacto completa
      - Estados activo/inactivo
      - Relaci√≥n con productos
      
      ### Caracter√≠sticas
      - Datos de contacto
      - Direcciones y tel√©fonos
      - Personas de contacto
      - Logs de auditor√≠a

  - name: Locations
    description: |
      üìç **Gesti√≥n de Ubicaciones de Almacenamiento**
      
      Endpoints para el manejo de ubicaciones donde se almacenan los productos.
      
      ### Funcionalidades
      - CRUD completo de ubicaciones
      - Estructura jer√°rquica
      - C√≥digos √∫nicos de ubicaci√≥n
      - Tipos de ubicaci√≥n
      
      ### Caracter√≠sticas
      - Ubicaciones anidadas
      - C√≥digos de identificaci√≥n
      - Tipos (BODEGA, AREA, etc.)
      - Estados activo/inactivo

  - name: Product Movements
    description: |
      üì¶ **Gesti√≥n de Movimientos de Inventario**
      
      Endpoints para registrar y consultar movimientos de stock.
      
      ### Funcionalidades
      - Registro de movimientos
      - Consulta de historial
      - Filtros avanzados
      - Actualizaci√≥n autom√°tica de stock
      
      ### Tipos de Movimiento
      - **IN**: Entrada de inventario
      - **OUT**: Salida de inventario
      - **ADJUSTMENT**: Ajuste de inventario
      
      ### Caracter√≠sticas
      - Trazabilidad completa
      - Razones obligatorias
      - Usuario responsable
      - Timestamps autom√°ticos

  - name: System
    description: |
      ‚öôÔ∏è **Endpoints del Sistema**
      
      Endpoints para monitoreo y administraci√≥n del sistema.
      
      ### Funcionalidades
      - Health check del sistema
      - Estado de servicios
      - Informaci√≥n de versi√≥n
      - M√©tricas de rendimiento
      
      ### Caracter√≠sticas
      - Monitoreo en tiempo real
      - Diagn√≥stico de problemas
      - Informaci√≥n de sistema
      - Logs de aplicaci√≥n

  - name: Audit Logs
    description: |
      üìä **Logs de Auditor√≠a del Sistema**
      
      Endpoints para consultar el historial de cambios en el sistema.
      
      ### Funcionalidades
      - Consulta de logs de auditor√≠a
      - Filtros por m√∫ltiples criterios
      - Marcado de logs como revisados
      - Informaci√≥n detallada de cambios
      
      ### Informaci√≥n Registrada
      - Tabla afectada
      - Acci√≥n realizada
      - Valores anteriores y nuevos
      - Usuario responsable
      - IP y User Agent
      - Metadatos adicionales
      
      ### Prop√≥sito
      - Cumplimiento normativo
      - Seguridad y trazabilidad
      - Control de cambios
      - Auditor√≠as internas

paths:
# --- HEALTH ---
  /health:
    get:
      summary: üè• Health check
      description: |
        Verifica el estado de salud del sistema.
        
        ### Caracter√≠sticas
        - Verificaci√≥n de conexi√≥n a base de datos
        - Estado de servicios cr√≠ticos
        - Tiempo de respuesta
        - Informaci√≥n del sistema
        
        ### Roles Permitidos
        - ‚úÖ **Todos los roles**: Acceso p√∫blico
      tags:
        - System
      responses:
        '200':
          description: ‚úÖ Sistema funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Sistema funcionando correctamente"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-01-01T00:00:00.000Z"
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "healthy"
                      uptime:
                        type: number
                        example: 3600
                      database:
                        type: string
                        example: "connected"
                      version:
                        type: string
                        example: "1.0.0"

# --- AUTH ---
  /auth/register:
    post:
      summary: üë§ Register new user
      description: |
        Registra un nuevo usuario en el sistema.
        
        ### Validaciones
        - **Email**: 
          - Formato v√°lido (example@domain.com)
          - √önico en el sistema
          - Dominio v√°lido
          - M√°ximo 255 caracteres
        - **Password**: 
          - M√≠nimo 8 caracteres
          - Al menos una may√∫scula
          - Al menos una min√∫scula
          - Al menos un n√∫mero
          - Al menos un car√°cter especial
          - M√°ximo 100 caracteres
        - **Name**: 
          - Entre 2 y 100 caracteres
          - Solo letras, espacios y acentos
          - Sin caracteres especiales
        - **Role**: 
          - ADMIN: Acceso total al sistema
          - USER: Acceso limitado a operaciones b√°sicas
          - VIEWER: Solo lectura
        
        ### Proceso
        1. Validaci√≥n de datos de entrada
        2. Verificaci√≥n de email √∫nico
        3. Encriptaci√≥n de contrase√±a (bcrypt)
        4. Creaci√≥n de usuario en base de datos
        5. Generaci√≥n de token JWT
        6. Registro en logs de auditor√≠a
        
        ### Consideraciones de Seguridad
        - Las contrase√±as se almacenan encriptadas con bcrypt
        - Los tokens tienen expiraci√≥n configurable (24h por defecto)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "SecurePass123!"
                name:
                  type: string
                  example: "John Doe"
                role:
                  type: string
                  enum: [ADMIN, USER, VIEWER, MANAGER, SUPERVISOR, AUDITOR]
                  example: "USER"
      responses:
        201:
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Usuario registrado exitosamente"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "user@example.com"
                      name:
                        type: string
                        example: "John Doe"
                      role:
                        type: string
                        example: "USER"
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
        400:
          description: Error de validaci√≥n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Email ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: üîë Login user
      description: |
        Inicia sesi√≥n de usuario y genera tokens JWT.
        
        ### Proceso
        1. Validaci√≥n de credenciales
        2. Generaci√≥n de access token
        3. Generaci√≥n de refresh token
        4. Registro en logs de auditor√≠a
        
        ### Tokens Generados
        - **Access Token**: 24 horas de validez
        - **Refresh Token**: 7 d√≠as de validez
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "SecurePass123!"
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login exitoso"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          email:
                            type: string
                            example: "user@example.com"
                          name:
                            type: string
                            example: "John Doe"
                          role:
                            type: string
                            example: "USER"
        401:
          description: Credenciales inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: üîÑ Refresh access token
      description: |
        Renueva el access token usando el refresh token.
        
        ### Proceso
        1. Validaci√≥n del refresh token
        2. Verificaci√≥n en blacklist
        3. Generaci√≥n de nuevo access token
        4. Registro en logs de auditor√≠a
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIs..."
      responses:
        200:
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token renovado exitosamente"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
        401:
          description: Token inv√°lido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: üö™ Logout user
      description: |
        Cierra la sesi√≥n del usuario y revoca sus tokens.
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Sesi√≥n cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Sesi√≥n cerrada exitosamente"
        '401':
          description: ‚ùå Token inv√°lido o expirado

# --- USERS ---
  /users:
    get:
      summary: üìã List all users
      description: |
        Obtiene la lista de todos los usuarios.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new user
      description: |
        Crea un nuevo usuario en el sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: ‚úÖ Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Email ya registrado

  /users/{id}:
    get:
      summary: üîç Get user by ID
      description: |
        Obtiene los detalles de un usuario espec√≠fico.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado
    put:
      summary: ‚úèÔ∏è Update user
      description: |
        Actualiza los datos de un usuario existente.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ‚úÖ Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado
    delete:
      summary: üóëÔ∏è Delete user
      description: |
        Elimina un usuario del sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Usuario eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado

# --- CATEGORIES ---
  /categories:
    get:
      summary: üìã List all categories
      description: |
        Obtiene la lista de todas las categor√≠as.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de categor√≠as obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoriesResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new category
      description: |
        Crea una nueva categor√≠a.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: ‚úÖ Categor√≠a creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Nombre ya existe

  /categories/{id}:
    get:
      summary: üîç Get category by ID
      description: |
        Obtiene los detalles de una categor√≠a espec√≠fica.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Categor√≠a encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada
    put:
      summary: ‚úèÔ∏è Update category
      description: |
        Actualiza los datos de una categor√≠a existente.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: ‚úÖ Categor√≠a actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada
    delete:
      summary: üóëÔ∏è Delete category
      description: |
        Elimina una categor√≠a del sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Categor√≠a eliminada exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada

# --- SUPPLIERS ---
  /suppliers:
    get:
      summary: üìã List all suppliers
      description: |
        Obtiene la lista de todos los proveedores.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de proveedores obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSuppliersResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new supplier
      description: |
        Crea un nuevo proveedor.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSupplierRequest'
      responses:
        '201':
          description: ‚úÖ Proveedor creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå RUT/Email ya existe

  /suppliers/{id}:
    get:
      summary: üîç Get supplier by ID
      description: |
        Obtiene los detalles de un proveedor espec√≠fico.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Proveedor encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado
    put:
      summary: ‚úèÔ∏è Update supplier
      description: |
        Actualiza los datos de un proveedor existente.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSupplierRequest'
      responses:
        '200':
          description: ‚úÖ Proveedor actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado
    delete:
      summary: üóëÔ∏è Delete supplier
      description: |
        Elimina un proveedor del sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Proveedor eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado

# --- LOCATIONS ---
  /locations:
    get:
      summary: üìã List all locations
      description: |
        Obtiene la lista de todas las ubicaciones.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Locations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de ubicaciones obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new location
      description: |
        Crea una nueva ubicaci√≥n.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Locations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationRequest'
      responses:
        '201':
          description: ‚úÖ Ubicaci√≥n creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå C√≥digo ya existe

  /locations/{id}:
    get:
      summary: üîç Get location by ID
      description: |
        Obtiene los detalles de una ubicaci√≥n espec√≠fica.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada
    put:
      summary: ‚úèÔ∏è Update location
      description: |
        Actualiza los datos de una ubicaci√≥n existente.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada
    delete:
      summary: üóëÔ∏è Delete location
      description: |
        Elimina una ubicaci√≥n del sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n eliminada exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada

# --- PRODUCTS ---
  /products:
    get:
      summary: üìã List all products
      description: |
        Obtiene la lista de todos los productos.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Products
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de productos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new product
      description: |
        Crea un nuevo producto.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: ‚úÖ Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå SKU/C√≥digo ya existe

  /products/{id}:
    get:
      summary: üîç Get product by ID
      description: |
        Obtiene los detalles de un producto espec√≠fico.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado
    put:
      summary: ‚úèÔ∏è Update product
      description: |
        Actualiza los datos de un producto existente.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: ‚úÖ Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado
    delete:
      summary: üóëÔ∏è Delete product
      description: |
        Elimina un producto del sistema.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Producto eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado

# --- PRODUCT MOVEMENTS ---
  /product-movements:
    get:
      summary: üìã List all product movements
      description: |
        Obtiene la lista de todos los movimientos de productos.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Product Movements
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de movimientos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductMovementsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new product movement
      description: |
        Registra un nuevo movimiento de producto.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **AUDITOR**: Sin acceso
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Product Movements
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductMovementRequest'
      responses:
        '201':
          description: ‚úÖ Movimiento registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMovementResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Stock insuficiente

  /product-movements/{id}:
    get:
      summary: üîç Get product movement by ID
      description: |
        Obtiene los detalles de un movimiento de producto espec√≠fico.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      tags:
        - Product Movements
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Movimiento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMovementResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Movimiento no encontrado

  /product-movements/by-product/{productId}:
    get:
      tags: [Product Movements]
      summary: üì¶ Get movements by product
      description: |
        Obtiene todos los movimientos de un producto espec√≠fico.
        
        ### Caracter√≠sticas
        - Paginaci√≥n incluida
        - Ordenado por fecha (m√°s reciente primero)
        - Filtros por tipo de movimiento
        - Filtros por fecha
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: ID del producto
        - $ref: '#/components/parameters/PaginationParams'
        - in: query
          name: movementType
          schema:
            type: string
            enum: [IN, OUT, ADJUSTMENT]
          description: Filtrar por tipo de movimiento
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Fecha inicial
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Fecha final
      responses:
        200:
          description: Lista de movimientos del producto
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Movimientos encontrados"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductMovement'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        404:
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /product-movements/by-user/{userId}:
    get:
      tags: [Product Movements]
      summary: üë§ Get movements by user
      description: |
        Obtiene todos los movimientos realizados por un usuario espec√≠fico.
        
        ### Caracter√≠sticas
        - Paginaci√≥n incluida
        - Ordenado por fecha (m√°s reciente primero)
        - Filtros por tipo de movimiento
        - Filtros por fecha
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚úÖ **MANAGER**: Acceso completo
        - ‚úÖ **SUPERVISOR**: Acceso completo
        - ‚úÖ **USER**: Acceso completo
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚úÖ **VIEWER**: Acceso completo
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID del usuario
        - $ref: '#/components/parameters/PaginationParams'
        - in: query
          name: movementType
          schema:
            type: string
            enum: [IN, OUT, ADJUSTMENT]
          description: Filtrar por tipo de movimiento
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Fecha inicial
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Fecha final
      responses:
        200:
          description: Lista de movimientos del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Movimientos encontrados"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductMovement'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        404:
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# --- AUDIT LOGS ---
  /audit-logs:
    get:
      summary: üìã List all audit logs
      description: |
        Obtiene la lista de todos los logs de auditor√≠a.
        
        ### Roles Permitidos
        - ‚úÖ **ADMIN**: Acceso completo
        - ‚ùå **MANAGER**: Sin acceso
        - ‚ùå **SUPERVISOR**: Sin acceso
        - ‚ùå **USER**: Sin acceso
        - ‚úÖ **AUDITOR**: Acceso completo
        - ‚ùå **VIEWER**: Sin acceso
      tags:
        - Audit Logs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de logs obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditLogsResponse'
        '401':
          description: ‚ùå No autorizado

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        üîê **Autenticaci√≥n JWT**
        
        Todas las rutas (excepto /auth/login y /auth/register) requieren token JWT.
        
        ### Formato
        ```
        Authorization: Bearer <token>
        ```
        
        ### Caracter√≠sticas
        - Expiraci√≥n: 24 horas
        - Refresh Token: 7 d√≠as
        - Roles incluidos en payload
        - Blacklist de tokens revocados

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error description"
        error:
          type: string
          example: "ERROR_CODE"
        
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

  parameters:
    PaginationParams:
      in: query
      name: pagination
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
            minimum: 1
          limit:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      description: Par√°metros de paginaci√≥n
      
    FilterParams:
      in: query
      name: filters
      schema:
        type: object
        properties:
          startDate:
            type: string
            format: date
          endDate:
            type: string
            format: date
          isActive:
            type: boolean
      description: Filtros generales

    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          minLength: 1
          example: "SecurePass123"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiresIn:
              type: integer
              example: 86400
            user:
              $ref: '#/components/schemas/UserData'

    UserData:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
        isActive:
          type: boolean

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [ADMIN, USER, VIEWER, MANAGER, SUPERVISOR, AUDITOR]
        isActive:
          type: boolean

    ListUsersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'

    CreateCategoryRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    CategoryResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/CategoryData'

    CategoryData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListCategoriesResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/CategoryData'

    CreateSupplierRequest:
      type: object
      required: [name, description, contactPerson, email, phone, address]
      properties:
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean

    UpdateSupplierRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean

    SupplierResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/SupplierData'

    SupplierData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListSuppliersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/SupplierData'

    CreateLocationRequest:
      type: object
      required: [name, description, code, type]
      properties:
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
          enum: [BODEGA, AREA, SECCION, ESTANTE]
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    UpdateLocationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
          enum: [BODEGA, AREA, SECCION, ESTANTE]
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    LocationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/LocationData'

    LocationData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListLocationsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationData'

    CreateProductRequest:
      type: object
      required: [name, description, sku, categoryId, supplierId, locationId]
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        currentStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/ProductData'

    ProductData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        currentStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListProductsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductData'

    CreateProductMovementRequest:
      type: object
      required: [productId, movementType, quantity, reason]
      properties:
        productId:
          type: integer
        movementType:
          type: string
          enum: [IN, OUT, ADJUSTMENT]
        quantity:
          type: number
        reason:
          type: string

    ProductMovementResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/ProductMovementData'

    ProductMovementData:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        userId:
          type: integer
        movementType:
          type: string
        quantity:
          type: number
        reason:
          type: string
        createdAt:
          type: string
          format: date-time

    ListProductMovementsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductMovementData'

    ListAuditLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogData'
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10

    AuditLogData:
      type: object
      properties:
        id:
          type: integer
          example: 1
        tableName:
          type: string
          example: "products"
        recordId:
          type: integer
          example: 123
        action:
          type: string
          example: "CREATE"
        oldValues:
          type: object
          nullable: true
        newValues:
          type: object
          nullable: true
        userId:
          type: integer
          nullable: true
          example: 1
        ipAddress:
          type: string
          nullable: true
          example: "192.168.1.1"
        userAgent:
          type: string
          nullable: true
          example: "Mozilla/5.0..."
        metadata:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        reviewed:
          type: boolean
          example: false

    # Additional User Schemas
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
        - role
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          example: "admin@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 50
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)"
          example: "SecurePass123"
        name:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\\s]+$"
          example: "Admin User"
        role:
          type: string
          enum: [ADMIN, USER, VIEWER]
          default: USER
          example: "ADMIN"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "admin@example.com"
        name:
          type: string
          example: "Admin User"
        role:
          type: string
          enum: [ADMIN, USER, VIEWER]
          example: "ADMIN"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    # Error Response
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Detailed error description"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email is required"
                  value:
                    type: string
                    example: "invalid-email"