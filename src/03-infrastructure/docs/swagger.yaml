openapi: 3.0.3
info:
  title: üè≠ Industrial Inventory API
  version: 1.0.0
  description: |
    ## Sistema de Inventario Industrial Minero
    
    API robusta y escalable para la gesti√≥n de inventario de instrumentos industriales mineros construida con Clean Architecture, TypeScript y PostgreSQL.
    
    ### Caracter√≠sticas Principales
    - ‚úÖ Gesti√≥n completa de instrumentos industriales (CRUD)
    - üîê Autenticaci√≥n JWT con roles y permisos
    - üìä Logging estructurado con Winston
    - üß™ Validaci√≥n robusta con Zod
    - üìö Documentaci√≥n interactiva completa
    - üèóÔ∏è Arquitectura limpia y escalable
    
    ### Tecnolog√≠as
    - **Backend**: Node.js, TypeScript, Express
    - **Base de Datos**: PostgreSQL
    - **Autenticaci√≥n**: JWT (JSON Web Tokens)
    - **Validaci√≥n**: Zod
    - **Logging**: Winston
    - **Documentaci√≥n**: Swagger/OpenAPI
    
    ### Arquitectura
    Este proyecto sigue los principios de Clean Architecture con 4 capas bien definidas:
    - **Domain Layer**: Entidades y reglas de negocio
    - **Application Layer**: Casos de uso y DTOs
    - **Infrastructure Layer**: Implementaciones t√©cnicas
    - **Presentation Layer**: Controladores y HTTP
    
    ---
    
    **Desarrollado por**: Daisy Castillo Sepulveda
    **Repositorio**: [GitHub](https://github.com/DaisyCastilloS/industrial-inventory)
  contact:
    name: Daisy Castillo Sepulveda
    url: https://github.com/DaisyCastilloS
    email: daisy.castillo@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/DaisyCastilloS/industrial-inventory/blob/main/README.md

servers:
  - url: http://localhost:3000
    description: Servidor de desarrollo local
  - url: https://api.industrial-inventory.com
    description: Servidor de producci√≥n (ejemplo)

tags:
  - name: Authentication
    description: |
      üîê **Gesti√≥n de Autenticaci√≥n y Autorizaci√≥n**
      
      Endpoints para el manejo de usuarios, sesiones y tokens de acceso.
      
      ### Funcionalidades
      - Registro de usuarios
      - Inicio de sesi√≥n
      - Refresh de tokens
      - Cierre de sesi√≥n
      - Gesti√≥n de roles y permisos
      
      ### Seguridad
      - Tokens JWT con expiraci√≥n
      - Refresh tokens autom√°ticos
      - Encriptaci√≥n de contrase√±as
      - Validaci√≥n de roles

  - name: Products
    description: |
      üì¶ **Gesti√≥n de Productos e Inventario**
      
      Endpoints para el manejo completo del cat√°logo de productos.
      
      ### Funcionalidades
      - CRUD completo de productos
      - Gesti√≥n de stock en tiempo real
      - Categorizaci√≥n y clasificaci√≥n
      - Informaci√≥n de proveedores
      - Ubicaciones de almacenamiento
      
      ### Caracter√≠sticas
      - C√≥digos √∫nicos de producto
      - Precios y costos
      - Stock m√≠nimo y m√°ximo
      - Estados activo/inactivo

  - name: Users
    description: |
      üë• **Gesti√≥n de Usuarios del Sistema**
      
      Endpoints para la administraci√≥n de usuarios y sus roles.
      
      ### Funcionalidades
      - CRUD completo de usuarios
      - Gesti√≥n de roles (ADMIN, USER, VIEWER)
      - Estados activo/inactivo
      - Informaci√≥n de contacto
      
      ### Seguridad
      - Encriptaci√≥n de contrase√±as
      - Validaci√≥n de permisos
      - Logs de auditor√≠a

  - name: Categories
    description: |
      üìÇ **Gesti√≥n de Categor√≠as de Productos**
      
      Endpoints para organizar productos en categor√≠as jer√°rquicas.
      
      ### Funcionalidades
      - CRUD completo de categor√≠as
      - Estructura jer√°rquica (parent/child)
      - Descripciones y metadatos
      - Estados activo/inactivo
      
      ### Caracter√≠sticas
      - Categor√≠as anidadas
      - Validaci√≥n de integridad
      - Logs de auditor√≠a

  - name: Suppliers
    description: |
      üè≠ **Gesti√≥n de Proveedores**
      
      Endpoints para el manejo de proveedores y sus informaci√≥n de contacto.
      
      ### Funcionalidades
      - CRUD completo de proveedores
      - Informaci√≥n de contacto completa
      - Estados activo/inactivo
      - Relaci√≥n con productos
      
      ### Caracter√≠sticas
      - Datos de contacto
      - Direcciones y tel√©fonos
      - Personas de contacto
      - Logs de auditor√≠a

  - name: Locations
    description: |
      üìç **Gesti√≥n de Ubicaciones de Almacenamiento**
      
      Endpoints para el manejo de ubicaciones donde se almacenan los productos.
      
      ### Funcionalidades
      - CRUD completo de ubicaciones
      - Estructura jer√°rquica
      - C√≥digos √∫nicos de ubicaci√≥n
      - Tipos de ubicaci√≥n
      
      ### Caracter√≠sticas
      - Ubicaciones anidadas
      - C√≥digos de identificaci√≥n
      - Tipos (BODEGA, AREA, etc.)
      - Estados activo/inactivo

  - name: Product Movements
    description: |
      üì¶ **Gesti√≥n de Movimientos de Inventario**
      
      Endpoints para registrar y consultar movimientos de stock.
      
      ### Funcionalidades
      - Registro de movimientos
      - Consulta de historial
      - Filtros avanzados
      - Actualizaci√≥n autom√°tica de stock
      
      ### Tipos de Movimiento
      - **IN**: Entrada de inventario
      - **OUT**: Salida de inventario
      - **ADJUSTMENT**: Ajuste de inventario
      
      ### Caracter√≠sticas
      - Trazabilidad completa
      - Razones obligatorias
      - Usuario responsable
      - Timestamps autom√°ticos

  - name: Audit Logs
    description: |
      üìä **Logs de Auditor√≠a del Sistema**
      
      Endpoints para consultar el historial de cambios en el sistema.
      
      ### Funcionalidades
      - Consulta de logs de auditor√≠a
      - Filtros por m√∫ltiples criterios
      - Marcado de logs como revisados
      - Informaci√≥n detallada de cambios
      
      ### Informaci√≥n Registrada
      - Tabla afectada
      - Acci√≥n realizada
      - Valores anteriores y nuevos
      - Usuario responsable
      - IP y User Agent
      - Metadatos adicionales
      
      ### Prop√≥sito
      - Cumplimiento normativo
      - Seguridad y trazabilidad
      - Control de cambios
      - Auditor√≠as internas

paths:
# --- AUTH ---
  /auth/register:
    post:
      summary: üë§ Register new user
      description: |
        Registra un nuevo usuario en el sistema.
        
        ### Validaciones
        - **Email**: 
          - Formato v√°lido (example@domain.com)
          - √önico en el sistema
          - Dominio v√°lido
          - M√°ximo 255 caracteres
        - **Password**: 
          - M√≠nimo 8 caracteres
          - Al menos una may√∫scula
          - Al menos una min√∫scula
          - Al menos un n√∫mero
          - Al menos un car√°cter especial
          - M√°ximo 100 caracteres
        - **Name**: 
          - Entre 2 y 100 caracteres
          - Solo letras, espacios y acentos
          - Sin caracteres especiales
        - **Role**: 
          - ADMIN: Acceso total al sistema
          - USER: Acceso limitado a operaciones b√°sicas
          - VIEWER: Solo lectura
        
        ### Proceso
        1. Validaci√≥n de datos de entrada
        2. Verificaci√≥n de email √∫nico
        3. Encriptaci√≥n de contrase√±a (bcrypt)
        4. Creaci√≥n de usuario en base de datos
        5. Generaci√≥n de token JWT
        6. Registro en logs de auditor√≠a
        
        ### Consideraciones de Seguridad
        - Las contrase√±as se almacenan encriptadas con bcrypt
        - Los tokens tienen expiraci√≥n configurable (24h por defecto)
        - Se registra el intento en logs de auditor√≠a
        - Se valida la fortaleza de la contrase√±a
        - Se limita la cantidad de intentos por IP
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              email: "john.doe@company.com"
              password: "SecurePass123!"
              name: "John Doe"
              role: "USER"
      responses:
        '201':
          description: ‚úÖ Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                message: "Usuario registrado exitosamente"
                timestamp: "2024-01-15T10:30:00.000Z"
                data:
                  id: 1
                  email: "john.doe@company.com"
                  name: "John Doe"
                  role: "USER"
                  isActive: true
                  createdAt: "2024-01-15T10:30:00.000Z"
                  updatedAt: "2024-01-15T10:30:00.000Z"
        '400':
          description: ‚ùå Error en los datos de entrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Error en los datos de entrada"
                timestamp: "2024-01-15T10:30:00.000Z"
                error:
                  code: "VALIDATION_ERROR"
                  message: "Datos inv√°lidos"
                  details:
                    - field: "email"
                      message: "El formato del email es inv√°lido"
                      value: "invalid.email"
                    - field: "password"
                      message: "La contrase√±a debe tener al menos 8 caracteres"
                      value: "weak"
                    - field: "name"
                      message: "El nombre debe tener entre 2 y 100 caracteres"
                      value: "A"
        '409':
          description: ‚ùå El email ya est√° registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "El email ya est√° registrado"
                timestamp: "2024-01-15T10:30:00.000Z"
                error:
                  code: "CONFLICT"
                  message: "Ya existe un usuario con ese email"
                  details:
                    - field: "email"
                      message: "Email duplicado"
                      value: "john.doe@company.com"

  /auth/login:
    post:
      summary: üîë Login user
      description: |
        Autentica un usuario y devuelve tokens de acceso.
        
        ### Proceso
        1. Validaci√≥n de credenciales
        2. Verificaci√≥n de cuenta activa
        3. Generaci√≥n de access token
        4. Generaci√≥n de refresh token
        5. Registro de inicio de sesi√≥n
        
        ### Tokens Generados
        - **Access Token**: 
          - JWT para autenticaci√≥n
          - Duraci√≥n: 24 horas
          - Contiene: userId, role, permissions
          - Uso: Autorizaci√≥n de requests
        - **Refresh Token**: 
          - Para renovar access token
          - Duraci√≥n: 7 d√≠as
          - Almacenado en base de datos
          - Uso √∫nico por renovaci√≥n
        
        ### Seguridad
        - Bloqueo temporal tras 5 intentos fallidos
        - Registro de IP y User Agent
        - Validaci√≥n de contrase√±a encriptada
        - Verificaci√≥n de cuenta activa
        - Registro en logs de auditor√≠a
        
        ### Restricciones
        - Solo usuarios activos pueden iniciar sesi√≥n
        - M√°ximo 5 intentos fallidos por hora
        - Un refresh token por usuario
        - No se permite m√∫ltiples sesiones
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john.doe@company.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: ‚úÖ Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                success: true
                message: "Login exitoso"
                timestamp: "2024-01-15T10:30:00.000Z"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expiresIn: 86400
                  user:
                    id: 1
                    email: "john.doe@company.com"
                    name: "John Doe"
                    role: "USER"
                    isActive: true
        '400':
          description: ‚ùå Credenciales inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Credenciales inv√°lidas"
                timestamp: "2024-01-15T10:30:00.000Z"
                error:
                  code: "INVALID_CREDENTIALS"
                  message: "Email o contrase√±a incorrectos"
        '401':
          description: ‚ùå Usuario inactivo o bloqueado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: üîÑ Refresh access token
      description: |
        Renueva el token de acceso usando un refresh token v√°lido.
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Token renovado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: ‚ùå Token inv√°lido o expirado

  /auth/logout:
    post:
      summary: üö™ Logout user
      description: |
        Cierra la sesi√≥n del usuario y revoca sus tokens.
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Sesi√≥n cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Sesi√≥n cerrada exitosamente"
        '401':
          description: ‚ùå Token inv√°lido o expirado

# --- USERS ---
  /users:
    get:
      summary: üìã List all users
      description: |
        Obtiene la lista de todos los usuarios.
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new user
      description: |
        Crea un nuevo usuario en el sistema.
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: ‚úÖ Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Email ya registrado

  /users/{id}:
    get:
      summary: üîç Get user by ID
      description: |
        Obtiene los detalles de un usuario espec√≠fico.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado
    put:
      summary: ‚úèÔ∏è Update user
      description: |
        Actualiza los datos de un usuario existente.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ‚úÖ Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado
    delete:
      summary: üóëÔ∏è Delete user
      description: |
        Elimina un usuario del sistema.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Usuario eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Usuario no encontrado

# --- CATEGORIES ---
  /categories:
    get:
      summary: üìã List all categories
      description: |
        Obtiene la lista de todas las categor√≠as.
      tags:
        - Categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de categor√≠as obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoriesResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new category
      description: |
        Crea una nueva categor√≠a.
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: ‚úÖ Categor√≠a creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Nombre ya existe

  /categories/{id}:
    get:
      summary: üîç Get category by ID
      description: |
        Obtiene los detalles de una categor√≠a espec√≠fica.
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Categor√≠a encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada
    put:
      summary: ‚úèÔ∏è Update category
      description: |
        Actualiza los datos de una categor√≠a existente.
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: ‚úÖ Categor√≠a actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada
    delete:
      summary: üóëÔ∏è Delete category
      description: |
        Elimina una categor√≠a del sistema.
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Categor√≠a eliminada exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Categor√≠a no encontrada

# --- SUPPLIERS ---
  /suppliers:
    get:
      summary: üìã List all suppliers
      description: |
        Obtiene la lista de todos los proveedores.
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de proveedores obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSuppliersResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new supplier
      description: |
        Crea un nuevo proveedor.
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSupplierRequest'
      responses:
        '201':
          description: ‚úÖ Proveedor creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå RUT/Email ya existe

  /suppliers/{id}:
    get:
      summary: üîç Get supplier by ID
      description: |
        Obtiene los detalles de un proveedor espec√≠fico.
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Proveedor encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado
    put:
      summary: ‚úèÔ∏è Update supplier
      description: |
        Actualiza los datos de un proveedor existente.
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSupplierRequest'
      responses:
        '200':
          description: ‚úÖ Proveedor actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado
    delete:
      summary: üóëÔ∏è Delete supplier
      description: |
        Elimina un proveedor del sistema.
      tags:
        - Suppliers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Proveedor eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Proveedor no encontrado

# --- LOCATIONS ---
  /locations:
    get:
      summary: üìã List all locations
      description: |
        Obtiene la lista de todas las ubicaciones.
      tags:
        - Locations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de ubicaciones obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new location
      description: |
        Crea una nueva ubicaci√≥n.
      tags:
        - Locations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationRequest'
      responses:
        '201':
          description: ‚úÖ Ubicaci√≥n creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå C√≥digo ya existe

  /locations/{id}:
    get:
      summary: üîç Get location by ID
      description: |
        Obtiene los detalles de una ubicaci√≥n espec√≠fica.
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada
    put:
      summary: ‚úèÔ∏è Update location
      description: |
        Actualiza los datos de una ubicaci√≥n existente.
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada
    delete:
      summary: üóëÔ∏è Delete location
      description: |
        Elimina una ubicaci√≥n del sistema.
      tags:
        - Locations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Ubicaci√≥n eliminada exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Ubicaci√≥n no encontrada

# --- PRODUCTS ---
  /products:
    get:
      summary: üìã List all products
      description: |
        Obtiene la lista de todos los productos.
      tags:
        - Products
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de productos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new product
      description: |
        Crea un nuevo producto.
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: ‚úÖ Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå SKU/C√≥digo ya existe

  /products/{id}:
    get:
      summary: üîç Get product by ID
      description: |
        Obtiene los detalles de un producto espec√≠fico.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado
    put:
      summary: ‚úèÔ∏è Update product
      description: |
        Actualiza los datos de un producto existente.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: ‚úÖ Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado
    delete:
      summary: üóëÔ∏è Delete product
      description: |
        Elimina un producto del sistema.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ‚úÖ Producto eliminado exitosamente
        '401':
          description: ‚ùå No autorizado
        '404':
          description: ‚ùå Producto no encontrado

# --- PRODUCT MOVEMENTS ---
  /product-movements:
    get:
      summary: üìã List all product movements
      description: |
        Obtiene la lista de todos los movimientos de productos.
      tags:
        - Product Movements
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de movimientos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductMovementsResponse'
        '401':
          description: ‚ùå No autorizado
    post:
      summary: ‚ûï Create new product movement
      description: |
        Registra un nuevo movimiento de producto.
      tags:
        - Product Movements
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductMovementRequest'
      responses:
        '201':
          description: ‚úÖ Movimiento registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMovementResponse'
        '400':
          description: ‚ùå Datos inv√°lidos
        '401':
          description: ‚ùå No autorizado
        '409':
          description: ‚ùå Stock insuficiente

# --- AUDIT LOGS ---
  /audit-logs:
    get:
      summary: üìã List all audit logs
      description: |
        Obtiene la lista de todos los logs de auditor√≠a.
      tags:
        - Audit Logs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ‚úÖ Lista de logs obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditLogsResponse'
        '401':
          description: ‚ùå No autorizado

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          minLength: 1
          example: "SecurePass123"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiresIn:
              type: integer
              example: 86400
            user:
              $ref: '#/components/schemas/UserData'

    UserData:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
        isActive:
          type: boolean

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [ADMIN, USER, VIEWER]
        isActive:
          type: boolean

    ListUsersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'

    CreateCategoryRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    CategoryResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/CategoryData'

    CategoryData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListCategoriesResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/CategoryData'

    CreateSupplierRequest:
      type: object
      required: [name, description, contactPerson, email, phone, address]
      properties:
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean

    UpdateSupplierRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean

    SupplierResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/SupplierData'

    SupplierData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        contactPerson:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListSuppliersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/SupplierData'

    CreateLocationRequest:
      type: object
      required: [name, description, code, type]
      properties:
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
          enum: [BODEGA, AREA, SECCION, ESTANTE]
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    UpdateLocationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
          enum: [BODEGA, AREA, SECCION, ESTANTE]
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean

    LocationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/LocationData'

    LocationData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        code:
          type: string
        type:
          type: string
        parentId:
          type: integer
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListLocationsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationData'

    CreateProductRequest:
      type: object
      required: [name, description, sku, categoryId, supplierId, locationId]
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        currentStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/ProductData'

    ProductData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        categoryId:
          type: integer
        supplierId:
          type: integer
        locationId:
          type: integer
        minStock:
          type: number
        maxStock:
          type: number
        currentStock:
          type: number
        price:
          type: number
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListProductsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductData'

    CreateProductMovementRequest:
      type: object
      required: [productId, movementType, quantity, reason]
      properties:
        productId:
          type: integer
        movementType:
          type: string
          enum: [IN, OUT, ADJUSTMENT]
        quantity:
          type: number
        reason:
          type: string

    ProductMovementResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/ProductMovementData'

    ProductMovementData:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        userId:
          type: integer
        movementType:
          type: string
        quantity:
          type: number
        reason:
          type: string
        createdAt:
          type: string
          format: date-time

    ListProductMovementsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductMovementData'

    ListAuditLogsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogData'

    AuditLogData:
      type: object
      properties:
        id:
          type: integer
        tableName:
          type: string
        action:
          type: string
        oldValues:
          type: object
        newValues:
          type: object
        userId:
          type: integer
        ipAddress:
          type: string
        userAgent:
          type: string
        createdAt:
          type: string
          format: date-time

    # Additional User Schemas
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
        - role
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          example: "admin@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 50
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)"
          example: "SecurePass123"
        name:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\\s]+$"
          example: "Admin User"
        role:
          type: string
          enum: [ADMIN, USER, VIEWER]
          default: USER
          example: "ADMIN"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "admin@example.com"
        name:
          type: string
          example: "Admin User"
        role:
          type: string
          enum: [ADMIN, USER, VIEWER]
          example: "ADMIN"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    # Error Response
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Detailed error description"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email is required"
                  value:
                    type: string
                    example: "invalid-email"